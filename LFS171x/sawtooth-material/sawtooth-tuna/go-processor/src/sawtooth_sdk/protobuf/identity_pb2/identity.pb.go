// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sawtooth_sdk/protobuf/identity_pb2/identity.proto

/*
Package identity is a generated protocol buffer package.

It is generated from these files:
	sawtooth_sdk/protobuf/identity_pb2/identity.proto

It has these top-level messages:
	Policy
	PolicyList
	Role
	RoleList
*/
package identity

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Policy_Type int32

const (
	Policy_PERMIT_KEY Policy_Type = 0
	Policy_DENY_KEY   Policy_Type = 1
)

var Policy_Type_name = map[int32]string{
	0: "PERMIT_KEY",
	1: "DENY_KEY",
}
var Policy_Type_value = map[string]int32{
	"PERMIT_KEY": 0,
	"DENY_KEY":   1,
}

func (x Policy_Type) String() string {
	return proto.EnumName(Policy_Type_name, int32(x))
}
func (Policy_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Policy struct {
	// name of the policy, this should be unique.
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// list of Entries
	// The entries will be processed in order from first to last.
	Entries []*Policy_Entry `protobuf:"bytes,2,rep,name=entries" json:"entries,omitempty"`
}

func (m *Policy) Reset()                    { *m = Policy{} }
func (m *Policy) String() string            { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()               {}
func (*Policy) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Policy) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Policy) GetEntries() []*Policy_Entry {
	if m != nil {
		return m.Entries
	}
	return nil
}

type Policy_Entry struct {
	// Whether this is a Permit_KEY or Deny_KEY entry
	Type Policy_Type `protobuf:"varint,1,opt,name=type,enum=Policy_Type" json:"type,omitempty"`
	// This should be a list of public keys or * to refer to all participants.
	// If using *, it should be the only key in the list.
	Key string `protobuf:"bytes,2,opt,name=key" json:"key,omitempty"`
}

func (m *Policy_Entry) Reset()                    { *m = Policy_Entry{} }
func (m *Policy_Entry) String() string            { return proto.CompactTextString(m) }
func (*Policy_Entry) ProtoMessage()               {}
func (*Policy_Entry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *Policy_Entry) GetType() Policy_Type {
	if m != nil {
		return m.Type
	}
	return Policy_PERMIT_KEY
}

func (m *Policy_Entry) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

// Policy will be stored in a Policy list to account for state collisions
type PolicyList struct {
	Policies []*Policy `protobuf:"bytes,1,rep,name=policies" json:"policies,omitempty"`
}

func (m *PolicyList) Reset()                    { *m = PolicyList{} }
func (m *PolicyList) String() string            { return proto.CompactTextString(m) }
func (*PolicyList) ProtoMessage()               {}
func (*PolicyList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *PolicyList) GetPolicies() []*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

type Role struct {
	// Role name
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	// Name of corresponding policy
	PolicyName string `protobuf:"bytes,2,opt,name=policy_name,json=policyName" json:"policy_name,omitempty"`
}

func (m *Role) Reset()                    { *m = Role{} }
func (m *Role) String() string            { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()               {}
func (*Role) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Role) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Role) GetPolicyName() string {
	if m != nil {
		return m.PolicyName
	}
	return ""
}

// Roles will be stored in a RoleList to account for state collisions
type RoleList struct {
	Roles []*Role `protobuf:"bytes,1,rep,name=roles" json:"roles,omitempty"`
}

func (m *RoleList) Reset()                    { *m = RoleList{} }
func (m *RoleList) String() string            { return proto.CompactTextString(m) }
func (*RoleList) ProtoMessage()               {}
func (*RoleList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *RoleList) GetRoles() []*Role {
	if m != nil {
		return m.Roles
	}
	return nil
}

func init() {
	proto.RegisterType((*Policy)(nil), "Policy")
	proto.RegisterType((*Policy_Entry)(nil), "Policy.Entry")
	proto.RegisterType((*PolicyList)(nil), "PolicyList")
	proto.RegisterType((*Role)(nil), "Role")
	proto.RegisterType((*RoleList)(nil), "RoleList")
	proto.RegisterEnum("Policy_Type", Policy_Type_name, Policy_Type_value)
}

func init() { proto.RegisterFile("sawtooth_sdk/protobuf/identity_pb2/identity.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x90, 0x41, 0x4b, 0xfb, 0x40,
	0x10, 0xc5, 0xff, 0xfb, 0x6f, 0xd2, 0xc6, 0x69, 0x2d, 0x65, 0x4f, 0xa5, 0x82, 0x86, 0x28, 0xb4,
	0xa7, 0x2d, 0x8d, 0xc7, 0xde, 0xc4, 0x1c, 0x44, 0x2d, 0x61, 0xe9, 0xa5, 0xa7, 0xd0, 0xd8, 0x15,
	0x97, 0xd6, 0x6e, 0x48, 0x56, 0x64, 0xbf, 0x91, 0x1f, 0xd3, 0xdd, 0x59, 0x53, 0x10, 0xbc, 0xcd,
	0xbc, 0xdf, 0xdb, 0x79, 0xb3, 0x03, 0x8b, 0x66, 0xfb, 0xa9, 0x95, 0xd2, 0x6f, 0x45, 0xb3, 0xdb,
	0xcf, 0xab, 0x5a, 0x69, 0x55, 0x7e, 0xbc, 0xce, 0xe5, 0x4e, 0x1c, 0xb5, 0xd4, 0xa6, 0xa8, 0xca,
	0xf4, 0xd4, 0x30, 0xc4, 0xc9, 0x17, 0x81, 0x6e, 0xae, 0x0e, 0xf2, 0xc5, 0x50, 0x0a, 0xc1, 0x71,
	0xfb, 0x2e, 0xc6, 0x24, 0x26, 0xb3, 0x33, 0x8e, 0x35, 0x9d, 0x42, 0xcf, 0xda, 0x6b, 0x29, 0x9a,
	0xf1, 0xff, 0xb8, 0x33, 0xeb, 0xa7, 0xe7, 0xcc, 0xbb, 0x59, 0x66, 0x65, 0xc3, 0x5b, 0x3a, 0x59,
	0x42, 0x88, 0x0a, 0x8d, 0x21, 0xd0, 0xa6, 0xf2, 0x53, 0x86, 0xe9, 0xa0, 0xb5, 0xaf, 0xad, 0xc6,
	0x91, 0xd0, 0x11, 0x74, 0xf6, 0xc2, 0xd8, 0x79, 0x2e, 0xc6, 0x95, 0xc9, 0x0d, 0x04, 0x8e, 0xd3,
	0x21, 0x40, 0x9e, 0xf1, 0xe7, 0x87, 0x75, 0xf1, 0x98, 0x6d, 0x46, 0xff, 0xe8, 0x00, 0xa2, 0xfb,
	0x6c, 0xb5, 0xc1, 0x8e, 0x24, 0x0b, 0x4b, 0x71, 0xd8, 0x93, 0x6c, 0x34, 0xbd, 0x86, 0xa8, 0x72,
	0x9d, 0x5b, 0x8d, 0xe0, 0x6a, 0xbd, 0x9f, 0x2c, 0x7e, 0x02, 0xc9, 0x12, 0x02, 0xae, 0x0e, 0xe2,
	0xcf, 0xaf, 0x5d, 0x41, 0x1f, 0x7d, 0xa6, 0x40, 0xe4, 0xd7, 0x01, 0x2f, 0xad, 0xac, 0x92, 0x4c,
	0x21, 0x72, 0x8f, 0x31, 0xed, 0x02, 0xc2, 0xda, 0xd6, 0x6d, 0x54, 0xc8, 0x1c, 0xe1, 0x5e, 0xbb,
	0xbb, 0x84, 0x49, 0x7b, 0x78, 0xf6, 0xfb, 0xbc, 0xf6, 0xfa, 0x39, 0x29, 0xbb, 0x58, 0xdf, 0x7e,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xd5, 0xd5, 0x97, 0xc1, 0x9f, 0x01, 0x00, 0x00,
}
