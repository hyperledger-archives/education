// Code generated by protoc-gen-go. DO NOT EDIT.
// source: sawtooth_sdk/protobuf/batch_pb2/batch.proto

/*
Package batch_pb2 is a generated protocol buffer package.

It is generated from these files:
	sawtooth_sdk/protobuf/batch_pb2/batch.proto

It has these top-level messages:
	BatchHeader
	Batch
	BatchList
*/
package batch_pb2

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import transaction "sawtooth_sdk/protobuf/transaction_pb2"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type BatchHeader struct {
	// Public key for the client that signed the BatchHeader
	SignerPubkey string `protobuf:"bytes,1,opt,name=signer_pubkey,json=signerPubkey" json:"signer_pubkey,omitempty"`
	// List of transaction.header_signatures that match the order of
	// transactions required for the batch
	TransactionIds []string `protobuf:"bytes,2,rep,name=transaction_ids,json=transactionIds" json:"transaction_ids,omitempty"`
}

func (m *BatchHeader) Reset()                    { *m = BatchHeader{} }
func (m *BatchHeader) String() string            { return proto.CompactTextString(m) }
func (*BatchHeader) ProtoMessage()               {}
func (*BatchHeader) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *BatchHeader) GetSignerPubkey() string {
	if m != nil {
		return m.SignerPubkey
	}
	return ""
}

func (m *BatchHeader) GetTransactionIds() []string {
	if m != nil {
		return m.TransactionIds
	}
	return nil
}

type Batch struct {
	// The serialized version of the BlockHeader
	Header []byte `protobuf:"bytes,1,opt,name=header,proto3" json:"header,omitempty"`
	// The signature derived from signing the header
	HeaderSignature string `protobuf:"bytes,2,opt,name=header_signature,json=headerSignature" json:"header_signature,omitempty"`
	// A list of the transactions that match the list of
	// transaction_ids listed in the batch header
	Transactions []*transaction.Transaction `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
	// A debugging flag which indicates this batch should be traced through the
	// system, resulting in a higher level of debugging output.
	Trace bool `protobuf:"varint,4,opt,name=trace" json:"trace,omitempty"`
}

func (m *Batch) Reset()                    { *m = Batch{} }
func (m *Batch) String() string            { return proto.CompactTextString(m) }
func (*Batch) ProtoMessage()               {}
func (*Batch) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Batch) GetHeader() []byte {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *Batch) GetHeaderSignature() string {
	if m != nil {
		return m.HeaderSignature
	}
	return ""
}

func (m *Batch) GetTransactions() []*transaction.Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Batch) GetTrace() bool {
	if m != nil {
		return m.Trace
	}
	return false
}

type BatchList struct {
	Batches []*Batch `protobuf:"bytes,1,rep,name=batches" json:"batches,omitempty"`
}

func (m *BatchList) Reset()                    { *m = BatchList{} }
func (m *BatchList) String() string            { return proto.CompactTextString(m) }
func (*BatchList) ProtoMessage()               {}
func (*BatchList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *BatchList) GetBatches() []*Batch {
	if m != nil {
		return m.Batches
	}
	return nil
}

func init() {
	proto.RegisterType((*BatchHeader)(nil), "BatchHeader")
	proto.RegisterType((*Batch)(nil), "Batch")
	proto.RegisterType((*BatchList)(nil), "BatchList")
}

func init() { proto.RegisterFile("sawtooth_sdk/protobuf/batch_pb2/batch.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 279 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4b, 0xf4, 0x30,
	0x10, 0x86, 0xe9, 0xb7, 0xdf, 0x56, 0x3b, 0x5b, 0x5d, 0x09, 0x2a, 0xc5, 0x53, 0xa9, 0x82, 0x8a,
	0x98, 0x95, 0xf5, 0xe0, 0x7d, 0x4f, 0x0a, 0x1e, 0x96, 0xe8, 0x49, 0x0f, 0x25, 0x69, 0xa3, 0x2d,
	0x0b, 0x4d, 0x49, 0x52, 0xc4, 0xbf, 0xe1, 0x2f, 0x36, 0x9d, 0x58, 0xad, 0xe0, 0x2d, 0xf3, 0x64,
	0xf2, 0xcc, 0xf0, 0x06, 0x2e, 0x0c, 0x7f, 0xb3, 0x4a, 0xd9, 0x2a, 0x37, 0xe5, 0x66, 0xd1, 0x6a,
	0x65, 0x95, 0xe8, 0x5e, 0x16, 0x82, 0xdb, 0xa2, 0xca, 0x5b, 0xb1, 0xf4, 0x27, 0x8a, 0x17, 0x47,
	0x37, 0x7f, 0x37, 0x5b, 0xcd, 0x1b, 0xc3, 0x0b, 0x5b, 0xab, 0x06, 0x9f, 0x8c, 0x6a, 0xff, 0x30,
	0x7b, 0x86, 0xd9, 0xaa, 0xf7, 0xdc, 0x4a, 0x5e, 0x4a, 0x4d, 0x8e, 0x61, 0xc7, 0xd4, 0xaf, 0x8d,
	0xd4, 0x79, 0xdb, 0x89, 0x8d, 0x7c, 0x4f, 0x82, 0x34, 0x38, 0x8b, 0x58, 0xec, 0xe1, 0x1a, 0x19,
	0x39, 0x85, 0xf9, 0x58, 0x5c, 0x97, 0x26, 0xf9, 0x97, 0x4e, 0x5c, 0xdb, 0xee, 0x08, 0xdf, 0x95,
	0x26, 0xfb, 0x08, 0x60, 0x8a, 0x76, 0x72, 0x08, 0x61, 0x85, 0x13, 0x50, 0x18, 0xb3, 0xaf, 0x8a,
	0x9c, 0xc3, 0x9e, 0x3f, 0xe5, 0xfd, 0x04, 0x6e, 0x3b, 0x2d, 0x9d, 0xab, 0x1f, 0x39, 0xf7, 0xfc,
	0x61, 0xc0, 0xe4, 0x0a, 0xe2, 0x91, 0xde, 0x24, 0x13, 0x37, 0x72, 0xb6, 0x8c, 0xe9, 0xe3, 0x0f,
	0x64, 0xbf, 0x3a, 0xc8, 0x3e, 0x4c, 0x5d, 0x5d, 0xc8, 0xe4, 0xbf, 0x33, 0x6e, 0x33, 0x5f, 0x64,
	0x97, 0x10, 0xe1, 0x4e, 0xf7, 0xb5, 0xb1, 0x24, 0x85, 0x2d, 0x8c, 0x51, 0x1a, 0xb7, 0x58, 0xef,
	0x0b, 0x29, 0x5e, 0xb2, 0x01, 0xaf, 0x4e, 0xe0, 0x60, 0xc8, 0x96, 0xba, 0x6c, 0xe9, 0x90, 0xed,
	0x3a, 0x78, 0x8a, 0xbe, 0xff, 0x42, 0x84, 0x88, 0xaf, 0x3f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf7,
	0x42, 0xc5, 0x99, 0xb5, 0x01, 0x00, 0x00,
}
